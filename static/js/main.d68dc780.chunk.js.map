{"version":3,"sources":["Portfolio/PortfolioTable.js","Portfolio/AddStockAlert.js","Portfolio/AddPerfGraphAlert.js","Portfolio/Portfolio.js","Portfolio/AddPortfolioAlert.js","App.js","serviceWorker.js","index.js"],"names":["PortfolioTable","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this","stocks","stockTable","react_default","a","createElement","className","map","stock","key","name","unitValue","currency","quantity","totalValue","type","onChange","checkboxClick","Component","AddStockAlert","stockSymbol","stockQuantity","Dialog_default","open","show","onClose","handleClose","aria-labelledby","DialogTitle_default","id","DialogContent_default","TextField_default","autoFocus","margin","label","value","fullWidth","handleChange","DialogActions_default","Button_default","onClick","color","addStock","AddPerfGraphAlert","stockValues","colorArray","data","stockValue","index","x","y","mode","marker","showGraph","maxWidth","portfolioName","react_plotly_default","layout","width","height","Portfolio","setState","state","newStockSymbol","newStockQuantity","selectedStock","currencyEur","changeCurrency","bind","assertThisInitialized","countNewValues","getExchangeRate","countTotalValue","removeSelectedStocks","setRealTimeValueAndTotal","updateRealTimeValueAndTotal","drawGraph","getLast100StockValues","_this2","JSON","parse","localStorage","getItem","forEach","newStock","_this3","multiplier","toFixed","forceUpdate","dataObject","EurToUSD","parseFloat","metaData","latestTime","keys","_this4","url","axios","get","then","response","alert","getStockValue","push","setItem","stringify","_this5","indexOf","length","includes","toUpperCase","evt","defineProperty","target","stockName","splice","sum","filter","_this6","datesAndValues","values","date","_this7","removePortfolio","Portfolio_PortfolioTable","Portfolio_AddStockAlert","symbol","Portfolio_AddPerfGraphAlert","AddPortfolioAlert","newPortfolioName","showPortfolio","addNewPortfolio","App","portfolios","portfolioNames","removeItem","Portfolio_AddPortfolioAlert","src_Portfolio_Portfolio","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d68dc780.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass PortfolioTable extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const stocks = this.props.stockTable;\n        return (\n            <div className=\"tableOfStocks\">\n                <table>\n                    <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Unit value</th>\n                        <th>Quantity</th>\n                        <th>Total value</th>\n                        <th>Select</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {stocks.map(stock => <tr key={stock.name}>\n                        <td>{stock.name}</td>\n                        <td>{stock.unitValue}{this.props.currency}</td>\n                        <td>{stock.quantity}</td>\n                        <td>{stock.totalValue}{this.props.currency}</td>\n                        <td>\n                            <input type=\"checkbox\" onChange={() => this.props.checkboxClick(stock.name)}/>\n                        </td>\n                    </tr>)}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\n\nexport default PortfolioTable;\n","import React, {Component} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nclass AddStockAlert extends Component {\n    constructor(props) {\n        super(props);\n    };\n\n    render() {\n        const stockSymbol = this.props.stockSymbol\n        const stockQuantity = this.props.stockQuantity\n        return (\n            <Dialog\n        open={this.props.show}\n        onClose={this.props.handleClose}\n        aria-labelledby=\"form-dialog-title\"\n            >\n            <DialogTitle id=\"form-dialog-title\">Add new stock</DialogTitle>\n        <DialogContent>\n            <TextField\n                autoFocus\n                margin=\"dense\"\n                name=\"newStockSymbol\"\n                label=\"Enter the stock symbol\"\n                type=\"text\"\n                value={stockSymbol}\n                fullWidth\n                onChange={this.props.handleChange}\n            />\n            <TextField\n                margin=\"dense\"\n                name=\"newStockQuantity\"\n                label=\"Number of shares\"\n                type=\"number\"\n                value={stockQuantity}\n                fullWidth\n                onChange={this.props.handleChange}\n            />\n        </DialogContent>\n        <DialogActions>\n        <Button onClick={this.props.handleClose} color=\"primary\">\n            Cancel\n            </Button>\n        <Button onClick={() => this.props.addStock(stockSymbol, stockQuantity)} color=\"primary\">\n            OK\n        </Button>\n        </DialogActions>\n    </Dialog>\n        )\n    }\n}\nexport default AddStockAlert;\n","import React, {Component} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Plot from 'react-plotly.js';\n\nclass AddPerfGraphAlert extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const stockValues = this.props.stockValues;\n        const colorArray = ['red', 'green', 'blue', 'black', 'yellow', 'magenta', 'cyan', 'purple', 'brown', 'orange'];\n        /*create data (plot) for all stocks in the portfolio*/\n        const data = stockValues.map((stockValue,index) => {\n            return {\n                x: stockValue.x,\n                y: stockValue.y,\n                type: 'scatter',\n                mode: 'lines+points',\n                marker: {color: colorArray[index % 10]},\n                name: stockValue.name,\n            }\n        });\n        return (\n            <Dialog\n                open={this.props.showGraph}\n                onClose={this.props.handleClose}\n                aria-labelledby=\"form-dialog-title\"\n                maxWidth=\"md\"\n            >\n                <DialogTitle id=\"form-dialog-title\">{this.props.portfolioName}</DialogTitle>\n                <DialogContent>\n                    <Plot\n                        data={data}\n                        layout={{width: 600, height:400}}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={this.props.handleClose} color=\"primary\">\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nexport default AddPerfGraphAlert;\n","import React, {Component} from 'react';\nimport PortfolioTable from \"./PortfolioTable\";\nimport AddStockAlert from \"./AddStockAlert\";\nimport axios from 'axios';\nimport AddPerfGraphAlert from \"./AddPerfGraphAlert\";\n\nclass Portfolio extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            newStockSymbol: \"\",\n            newStockQuantity: 0,\n            selectedStock: [],\n            stocks: [],\n            totalValue: 0,\n            show: false,\n            showGraph: false,\n            currencyEur: false,\n            stockValues: [],\n        };\n        this.changeCurrency = this.changeCurrency.bind(this);\n        this.countNewValues = this.countNewValues.bind(this);\n        this.getExchangeRate = this.getExchangeRate.bind(this);\n        this.addStock = this.addStock.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.checkboxClick = this.checkboxClick.bind(this);\n        this.countTotalValue = this.countTotalValue.bind(this);\n        this.removeSelectedStocks = this.removeSelectedStocks.bind(this);\n        this.setRealTimeValueAndTotal = this.setRealTimeValueAndTotal.bind(this);\n        this.updateRealTimeValueAndTotal = this.updateRealTimeValueAndTotal.bind(this);\n        this.drawGraph = this.drawGraph.bind(this);\n        this.getLast100StockValues = this.getLast100StockValues.bind(this);\n    }\n    \n    /*get stocks from local storage and update latest prices when component mounts*/\n    componentDidMount() {\n        this.setState({\n            stocks: JSON.parse(localStorage.getItem(this.props.name))\n        }, () => {\n            this.state.stocks.forEach(stock => {\n                const newStock = {name: stock.name, quantity: stock.quantity}\n                this.updateRealTimeValueAndTotal(newStock)\n            })\n        })\n    }\n\n    /*change currency between euros and USD*/\n    changeCurrency(currency) {\n        const currencyEur = this.state.currencyEur;\n        const selectedCurrency = currency;\n        if (selectedCurrency === \"euro\" && !currencyEur)\n            this.setState({currencyEur: true}, () => {\n                this.countNewValues();\n            });\n        else if (selectedCurrency === \"USD\" && currencyEur) {\n            this.setState({currencyEur: false}, () => {\n                this.countNewValues();\n            });\n        }\n    }\n\n    /*count new values for stocks based on the chosen currency*/\n    countNewValues() {\n        const stocks = this.state.stocks;\n        const multiplier = this.state.currencyEur ? 1.0 / this.getExchangeRate() : this.getExchangeRate();\n        stocks.forEach(stock => {\n            stock.unitValue = (stock.unitValue * multiplier).toFixed(2);\n            stock.totalValue = (stock.unitValue * stock.quantity).toFixed(2);\n        });\n        this.forceUpdate();\n    }\n\n    getExchangeRate() {\n        const dataObject = this.props.EurToUSD;\n        return (\n            parseFloat(dataObject[\"Realtime Currency Exchange Rate\"][\"5. Exchange Rate\"])\n        )\n\n    }\n\n    getStockValue(metaData) {\n        const latestTime = Object.keys(metaData[\"Time Series (5min)\"])[0];\n        return (parseFloat(metaData[\"Time Series (5min)\"][latestTime][\"1. open\"]) +\n            parseFloat(metaData[\"Time Series (5min)\"][latestTime][\"2. high\"]) +\n            parseFloat(metaData[\"Time Series (5min)\"][latestTime][\"3. low\"]) +\n            parseFloat(metaData[\"Time Series (5min)\"][latestTime][\"4. close\"])\n        ) / 4.0\n\n    }\n\n    /*set unitValue and count totalValue based on fetched data from alphavantage*/\n    setRealTimeValueAndTotal(stock) {\n        const stocks = this.state.stocks;\n        const url = \"https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=\" + stock.name + \"&interval=5min&apikey=OHK5U5NEHY5FSE6A\"\n        axios.get(url).then(response => {\n            if (response.data[\"Note\"]) {\n                alert(\"Reached API-call-limit or unable to find price for given stock name! Unit value is set to 5 USD.\");\n                stock.unitValue = 5;\n                stock.totalValue = (stock.unitValue * stock.quantity).toFixed(2);\n            } else {\n                stock.unitValue = this.getStockValue(response.data).toFixed(2);\n                stock.totalValue = (stock.unitValue * stock.quantity).toFixed(2);\n                stocks.push(stock);\n                this.setState({\n                    stocks: stocks\n                });\n                localStorage.setItem(this.props.name, JSON.stringify(stocks));\n            }\n        });\n\n    }\n\n    /*update the latest value for unitValue and totalValue*/\n    updateRealTimeValueAndTotal(stock) {\n        const stocks = this.state.stocks;\n        const url = \"https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=\" + stock.name + \"&interval=5min&apikey=OHK5U5NEHY5FSE6A\"\n        axios.get(url).then(response => {\n            if(response.data[\"Note\"]){\n                alert(\"Already fetched 5 times within a minute from Alphavantage. Cannot fetch more.\")\n                return;\n            }\n            const unitValue = this.getStockValue(response.data).toFixed(2);\n            const totalValue = (unitValue * stock.quantity).toFixed(2);\n            const index = stocks.map(stock => stock.name).indexOf(stock.name);\n            stocks[index] = {name: stock.name, quantity: stock.quantity, unitValue: unitValue, totalValue: totalValue}\n            this.setState({\n                stocks: stocks\n            })\n        })\n\n    }\n\n    addStock(stockSymbol, stockQuantity) {\n        const stocks = this.state.stocks;\n        if (stocks.length < 50) {\n            if (!stocks.map(stock => stock.name).includes(stockSymbol.toUpperCase())) {\n                if (0 < stockSymbol.length && stockSymbol.length < 6 && stockQuantity > 0) {\n                    const stock = {name: stockSymbol.toUpperCase(), quantity: stockQuantity};\n                    this.setRealTimeValueAndTotal(stock);\n                    this.handleClose()\n                    /*empty the text fields from AddStockAlert*/\n                    this.setState({\n                        newStockSymbol: \"\",\n                        newStockQuantity: 0,\n                    });\n                }\n                else if (stockQuantity < 1) {\n                    alert(\"Number of shares must be bigger than 0\")\n                }\n                else if (stockSymbol.length < 0 || stockSymbol.length > 5) {\n                    alert(\"Stock symbol can have 1 to 5 letters\")\n                }\n                else {\n                    this.handleClose()\n                }\n\n            }\n            else {\n                alert(\"The stock name already exists\");\n                this.setState({\n                    newStockSymbol: \"\",\n                    newStockQuantity: 0,\n                });\n            }\n        }\n        else {\n            alert(\"Portfolio can only contain 50 different stocks. You need to first remove one to add a new stock\");\n            this.setState({\n                newStockSymbol: \"\",\n                newStockQuantity: 0,\n            });\n        }\n    }\n\n    handleChange(evt) {\n        this.setState({[evt.target.name]: evt.target.value});\n    }\n\n    handleClose = () => {\n        this.setState({show: false});\n        this.setState({showGraph: false})\n    };\n\n    /*set checked stocks to selectedStocks state*/\n    checkboxClick(stockName) {\n        const selectedStock = this.state.selectedStock;\n        if (selectedStock.includes(stockName)) {\n            selectedStock.splice(selectedStock.indexOf(stockName), 1)\n            this.setState({\n                selectedStock: selectedStock\n            });\n        }\n        else {\n            selectedStock.push(stockName);\n            this.setState({\n                selectedStock: selectedStock\n            });\n        }\n    }\n\n    /*count total value of all stocks in a portfolio*/\n    countTotalValue() {\n        const stocks = this.state.stocks;\n        let sum = 0.0;\n        stocks.forEach(stock => sum += parseFloat(stock.totalValue))\n        return sum.toFixed(2)\n    }\n\n    /*remove stocks set to selectedStocks state from the portfolio*/\n    removeSelectedStocks() {\n        let stocks = this.state.stocks;\n        this.state.selectedStock.forEach(selectedStock => {\n            stocks = stocks.filter(stock => {\n                return stock.name !== selectedStock\n            })\n        });\n        this.setState({stocks: stocks});\n        localStorage.setItem(this.props.name, JSON.stringify(stocks))\n    }\n\n    drawGraph(){\n        this.setState({showGraph: true})\n        const stocks = this.state.stocks;\n        stocks.forEach(stock => {\n            const url = \"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=\" + stock.name + \"&apikey=OHK5U5NEHY5FSE6A\"\n            axios.get(url).then(response => {\n                if (response.data[\"Note\"]) {\n                    alert(\"Reached API-call-limit! Not showing \" + stock.name);\n                } else {\n                    if(this.state.stockValues.map(stockValues => stockValues.name).includes(stock.name)) return;\n                    const datesAndValues = response.data[\"Time Series (Daily)\"];\n                    const values = this.getLast100StockValues(datesAndValues);\n                    const stockValues = this.state.stockValues;\n\n                    stockValues.push({\n                        name: stock.name, y: values, x: Object.keys(datesAndValues)\n                    });\n                    this.setState({\n                        stockValues: stockValues\n                    });\n                    this.forceUpdate();\n                }\n            });\n        });\n\n    }\n\n    getLast100StockValues(datesAndValues) {\n        const dates = Object.keys(datesAndValues);\n        return dates.map(date => {\n            return (parseFloat(datesAndValues[date][\"1. open\"]) +\n                parseFloat(datesAndValues[date][\"2. high\"]) +\n                parseFloat(datesAndValues[date][\"3. low\"]) +\n                parseFloat(datesAndValues[date][\"4. close\"])\n            ) / 4.0\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"portfolio\">\n                <div className=\"portfolioTop\">\n                    <p className=\"row portfolioName\">{this.props.name}</p>\n                    <button\n                        className=\"row\"\n                        value=\"euro\"\n                        onClick={() => this.changeCurrency(\"euro\")}>\n                        Show in €\n                    </button>\n                    <button\n                        className=\"row\"\n                        value=\"USD\"\n                        onClick={() => this.changeCurrency(\"USD\")}>\n                        Show in $\n                    </button>\n                    <button className=\"row deletePortfolioBtn\"\n                            onClick={() => this.props.removePortfolio(this.props.name)}><i className=\"fa fa-close\"></i>\n                    </button>\n                </div>\n\n                <PortfolioTable\n                    stockTable={this.state.stocks}\n                    checkboxClick={(stockName) => this.checkboxClick(stockName)}\n                    currency={this.state.currencyEur ? \" €\" : \" $\"}\n                />\n                <div className=\"portfolioBottom\">\n                    <p className=\"totalValue\">\n                        Total value of {this.props.name}: {this.countTotalValue()}{this.state.currencyEur ? \" €\" : \" $\"}\n                    </p>\n                    <button className=\"row\" onClick={() => this.setState({show: true})}>Add stock</button>\n                    <AddStockAlert\n                        show={this.state.show}\n                        addStock={(symbol, quantity) => this.addStock(symbol, quantity)}\n                        stockSymbol={this.state.newStockSymbol}\n                        stockQuantity={this.state.newStockQuantity}\n                        handleChange={this.handleChange}\n                        handleClose={this.handleClose}\n                    />\n                    <button className=\"row\" onClick={() => this.drawGraph()}>Perf graph</button>\n                    <AddPerfGraphAlert\n                        showGraph={this.state.showGraph}\n                        portfolioName={this.props.name}\n                        stockValues={this.state.stockValues}\n                        handleChange={this.handleChange}\n                        handleClose={this.handleClose}\n                    />\n                    <button className=\"row lastBtn\" onClick={() => this.removeSelectedStocks()}>Remove selected</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Portfolio;\n","import React, {Component} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nclass AddPortfolioAlert extends Component {\n    constructor(props) {\n        super(props);\n    };\n\n    render() {\n        const newPortfolioName = this.props.newPortfolioName\n        return (\n            <Dialog\n                open={this.props.showPortfolio}\n                onClose={this.props.handleClose}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <DialogTitle id=\"form-dialog-title\">Create new portfolio</DialogTitle>\n                <DialogContent>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        name=\"newPortfolioName\"\n                        label=\"Enter the portfolio name\"\n                        type=\"text\"\n                        value={newPortfolioName}\n                        fullWidth\n                        onChange={this.props.handleChange}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={this.props.handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={() => this.props.addNewPortfolio(newPortfolioName)} color=\"primary\">\n                        OK\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        )\n    }\n}\nexport default AddPortfolioAlert;\n","import React, {Component} from 'react';\nimport './App.css';\nimport Portfolio from \"./Portfolio/Portfolio\";\nimport AddPortfolioAlert from \"./Portfolio/AddPortfolioAlert\";\nimport axios from 'axios';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newPortfolioName: \"\",\n            portfolios: [],\n            showPortfolio: false,\n            EurToUSD: 1.0,\n        };\n        this.addNewPortfolio = this.addNewPortfolio.bind(this);\n        this.removePortfolio = this.removePortfolio.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n    }\n    \n    /*fetch the exchange rate from Eur to USD from alphavantage and set it to EurToUSD state\n    fetch portfolionmes from local storage and set them to portfolios state*/\n    componentDidMount() {\n        const url = \"https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=EUR&to_currency=USD&apikey=OHK5U5NEHY5FSE6A\";\n        axios.get(url).then (response => this.setState({EurToUSD: response.data}))\n        const portfolioNames = Object.keys(localStorage);\n        this.setState({\n            portfolios: portfolioNames\n        })\n    }\n\n    /*adds new portfolio to portfolios state if there are less than 10 portfolios*/\n    addNewPortfolio(name) {\n        const portfolios = this.state.portfolios;\n        if(portfolios.length < 10) {\n            if (name.length > 0) {\n                portfolios.push(name);\n                this.setState({\n                    portfolios: portfolios\n                });\n                this.handleClose()\n                localStorage.setItem(name, JSON.stringify([])) /*add the new portfolio to local storage*/\n                /*empty the text field in the AddPortfolioAlert window*/\n                this.setState({\n                    newPortfolioName: \"\",\n                });\n            }\n        }\n        else {\n            alert(\"You can only have 10 portfolios\")\n            this.setState({\n                newPortfolioName: \"\",\n            });\n            this.handleClose()\n        }\n    }\n\n    /*removes the portfolio from portfolios state and from local storage*/\n    removePortfolio(name) {\n        const portfolios = this.state.portfolios;\n        portfolios.splice(portfolios.indexOf(name), 1)\n        this.setState({\n            portfolios: portfolios\n        });\n        localStorage.removeItem(name)\n    }\n\n    handleChange(evt) {\n        this.setState({ [evt.target.name]: evt.target.value });\n    }\n\n    /*close the AddPortfolioAlert window*/\n    handleClose = () => {\n        this.setState({showPortfolio: false});\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <button onClick={() => this.setState({showPortfolio: true})} className=\"portfolioBtn\">Add new portfolio</button>\n                <AddPortfolioAlert\n                    showPortfolio={this.state.showPortfolio}\n                    addNewPortfolio={(name) => this.addNewPortfolio(name)}\n                    newPortfolioName={this.state.newPortfolioName}\n                    handleChange={this.handleChange}\n                    handleClose={this.handleClose}\n                />\n                <div>\n                {this.state.portfolios.map(portfolioName =>\n                    <Portfolio\n                        key={portfolioName}\n                        name={portfolioName}\n                        removePortfolio={(name) => this.removePortfolio(name)}\n                        EurToUSD={this.state.EurToUSD}\n                    />\n                )}\n                </div>\n\n\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}